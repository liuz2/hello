#+TITLE: Rollup.js 简明教程

* 介绍

** 概述

Rollup 是一个 JavaScript 模块打包器，可以把多个小代码编译为整个复杂代码。它使用标准的 ES6 模块。

** 安装

全局安装为命令行工具

#+BEGIN_SRC shell
  $ npm install --global rollup
#+END_SRC

** 快速开始

Rollup 可以使用命令行参数，也可以选用配置文件，甚至还能通过 JavaScript API 调用。可以通过 ~rollup --help~ 查看选项。

我们可以看一个库文件的配置样例 [[https://github.com/rollup/rollup-starter-lib/blob/master/rollup.config.js][rollup-starter-lib]] 

#+BEGIN_SRC javascript
  import resolve from '@rollup/plugin-node-resolve';
  import commonjs from '@rollup/plugin-commonjs';
  import pkg from './package.json';

  export default [
      // 适合浏览器的 UMD 构建版本
      {
	  input: 'src/main.js',
	  output: {
	      name: 'howLongUntilLunch',
	      file: pkg.browser,
	      format: 'umd'
	  },
	  plugins: [
	      resolve(),
	      commonjs(),
	  ]
      },
      // CommonJS 和 ES 模块构建版本
      {
	  input: 'src/main.js',
	  external: ['ms'],
	  output: [
	      { file: pkg.main, format: 'cjs' },
	      { file: pkg.module, format: 'es' }
	  ]
      }
  ];
#+END_SRC

以下命令假定你的入口文件是 ~main.js~ ，打包后的文件是 ~bundle.js~ 。

对于浏览器：

#+BEGIN_SRC shell
  # 编译为自执行函数 iife
  rollup main.js --file bundle.js --format iife
#+END_SRC

对于 Node.js：

#+BEGIN_SRC shell
  # 编译为 CommonJS 模块
  rollup main.js --file bundle.js --format cjs
#+END_SRC

对于浏览器和 Node.js 中两个环境：

#+BEGIN_SRC shell
  # UMD 格式需要打包名称
  rollup main.js --file bundle.js --format umd --name "myBundle"
#+END_SRC

** 兼容性

*** 导入 CommonJS

可以使用 [[https://github.com/rollup/plugins/tree/master/packages/commonjs][@rollup/plugin-commonjs]] 插件将 CommonJS 模块转换为 ES6 
模块，以便 Rollup 打包。

* 命令行界面

** TODO 配置文件

Rollup 配置文件就是一个 ES 模块，输出一个默认对象：

#+BEGIN_SRC javascript
  export default {
      input: 'src/main.js',
      output: {
	  file: 'bundle.js',
	  format: 'cjs'
      }
  };
#+END_SRC

这个配置文件一般名为 ~rollup.config.js~ 。Rollup 在幕后会把它转译为 CommonJS 然后再引入它。

如果你想在配置文件中使用 CommonJS 语法，即使用 ~require~ 或 ~module.exports~ ，就需要把文件扩展名改为 ~.cjs~ ，这会阻止 Rollup 将其转译。如果使用 Node 13+，将后缀改为 ~.mjs~ ，也可以阻止 Node.js 将其转译，直接当作 ES 模块使用。

如果想异步创建配置文件，可以使用 Promise：

#+BEGIN_SRC javascript
  // rollup.config.js
  import fetch from 'node-fetch';
  export default fetch('./some-remote-service-or-file-which-returns-actual-config');
#+END_SRC

* JavaScript API

* ES 模块语法

* 教程

* 插件开发

* 常见问题

* 将 Rollup 与其他工具整合

* 答疑

* 选项列表

* REF

1. [[https://rollupjs.org/guide/en/][rollup.js]] 官网
